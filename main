import tkinter as tk
from tkinter import messagebox

def button_click():
    input_text1 = left_text1.get("1.0", "end-1c")
    input_text2 = left_text2.get("1.0", "end-1c")
    result_label.config(text=f"You entered:\nText Box 1: {input_text1}\nText Box 2: {input_text2}")

def Encrypt_click():
     

    if(valid_key(middle_text1.get("1.0", "end-1c"))):
        playfair_encrypt(left_text1.get("1.0", "end-1c"), middle_text1.get("1.0", "end-1c").replace(" ",""))

    else:
        messagebox.showinfo("Key a error", "You have put an incorrect key")


def Decrypt_click():

    if(valid_key(middle_text1.get("1.0", "end-1c"))):
        playfair_decrypt(right_text1.get("1.0", "end-1c").replace(" ",""), middle_text1.get("1.0", "end-1c").replace(" ",""))

    else:
        messagebox.showinfo("Key a error", "You have put an incorrect key")


def Print_tab_click():

     if(valid_key(middle_text1.get("1.0", "end-1c"))):
         middle_text2.delete("1.0", "end")
         middle_text2.insert("1.0", build_playfair_matrix(middle_text1.get("1.0", "end-1c").replace(" ","")))

     else:
        messagebox.showinfo("Key a error", "You have put an incorrect key")
   
    
    
    

root = tk.Tk()
root.title("Playfair cipher")

# Set the background color to dark green
root.configure(bg="black")

# Create and place the left text boxes
left_text1 = tk.Text(root, width=20, height=5)
left_text1.grid(row=0, column=0, padx=10, pady=5)

left_text2 = tk.Text(root, width=20, height=5)
left_text2.grid(row=1, column=0, padx=10, pady=5)

left_text3 = tk.Text(root, width=20, height=5)
left_text3.grid(row=2, column=0, padx=10, pady=5)

# Insert the text into the left text boxes
left_text1.insert("1.0", "Text to encrypt ")
left_text2.insert("1.0", "Filtered text")
left_text3.insert("1.0", "Encrypted text")

# Create and place the middle text boxes
middle_text1 = tk.Text(root, width=20, height=5)
middle_text1.grid(row=0, column=1, padx=10, pady=5)

middle_text2 = tk.Text(root, width=20, height=5)
middle_text2.grid(row=1, column=1, padx=10, pady=5)

middle_text1.insert("1.0", "Keyword ")

# Create and place the right text boxes
right_text1 = tk.Text(root, width=20, height=5)
right_text1.grid(row=0, column=2, padx=10, pady=5)

right_text2 = tk.Text(root, width=20, height=5)
right_text2.grid(row=1, column=2, padx=10, pady=5)

right_text3 = tk.Text(root, width=20, height=5)
right_text3.grid(row=2, column=2, padx=10, pady=5)

right_text1.insert("1.0", "Text to decrypt ")
right_text2.insert("1.0", "Filtered text")
right_text3.insert("1.0", "Decrypted text")

# Create and place the buttons
left_button = tk.Button(root, text="Encrypt", command=Encrypt_click)
left_button.grid(row=3, column=0, padx=10, pady=5)

middle_button = tk.Button(root, text="Show encryption tab", command=Print_tab_click)
middle_button.grid(row=3, column=1, padx=10, pady=5)

right_button = tk.Button(root, text="Decrypt", command=Decrypt_click)
right_button.grid(row=3, column=2, padx=10, pady=5)

# Create a label for displaying the result
result_label = tk.Label(root, text="", width=40)
result_label.grid(row=4, column=1, padx=10, pady=5)




def prepare_text(text):
    list_alphabet= ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
    list_numbers = ['0','1','2','3','4','5','6','7','8','9']  
    list_diakritics = [['Č','Ď','Ň','Ř','Ť','Ž','Ě','Š','Ý','Í','É','Ú','Ů','Á'],['C','D','N','R','T','Z','E','S','Y','I','E','U','U','A']] 
    added_letter = False
    # Odstranit mezery, převést na velká písmena a nahradit "J" písmenem "I"
    text = text.upper().replace("J", "I")
    filtered_text = ""
    # Doplň doplňující znak, pokud je délka lichá

    for item in list_diakritics[0]:    # checks for any diakritics in string and the replaces them with nomral letters
        if item in text:
            #index = list_diakritics[0].index(item)
            text = text.replace(item,list_diakritics[1] [list_diakritics[0].index(item)])

    

    
    for item in text:
        if item in list_numbers: # checks for any numbers in text and then replaces them with written numbers, for example "XoneX"
                    list_Wnumbers = ["XZEROX","XONEX","XTWOX","XTHREEX","XFOURX","XFIVEX","XSIXX","XSEVENX","XEIGHTX","XNINEX"]
                    item = str(item)
                    text = text.replace(item,"")
                    item = int(item)
                    text = text +  list_Wnumbers[item] 

    
    for item in text:   #checks if every item from list is in list_alphabet
        if item in list_alphabet:
            filtered_text = filtered_text + item  #adds letters from list_alphabet into string
        else:
            if(item ==' '):      # checks for spaces in text and then replaces them with XMEZERAX
                filtered_text = filtered_text + "XMEZERAX"
    
    if len(text) % 2 != 0:
        added_letter = True
        if(text[-1] != "X"):
         text += "X"
        else:
            text += "W"
      
    
    filtered_text = filtered_text.replace(" ", "")
    return filtered_text, added_letter

def valid_key(key):
    string = ""
    key = key.upper()
    for letter in key:
        if (letter not in string):
            string = string + letter
        else:           
            return False
    
    return True


def build_playfair_matrix(key):
    # Vytvoření prázdné matice 5x5
    matrix = [['' for _ in range(5)] for _ in range(5)]
    used_letters = set()
    key = key.upper()

    row, col = 0, 0

    # Naplnění matice klíčovým slovem
    for letter in key:
        if letter not in used_letters:
            matrix[row][col] = letter
            used_letters.add(letter)
            col += 1
            if col == 5:
                col = 0
                row += 1

    # Přidání zbývajících písmen (kromě J) do matice
    for letter in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
        if letter != 'J' and letter not in used_letters:
            matrix[row][col] = letter
            used_letters.add(letter)
            col += 1
            if col == 5:
                col = 0
                row += 1

    return matrix

def playfair_encrypt(plaintext, key):
    result = prepare_text(plaintext)
    plaintext = result[0]
    matrix = build_playfair_matrix(key)
    encrypted_text = []
    filtered_text = ""

    # Šifrování dvojic písmen
    i = 0
    while i < len(plaintext):
        letter1 = plaintext[i]
        i += 1  # Move to the next character

        # Check if we've reached the end of the string
        if i == len(plaintext):
            # If the length is odd, add 'X' as the second letter
            letter2 = 'X'
        else:
            letter2 = plaintext[i]
            i += 1  # Move to the next character

        filtered_text = filtered_text + letter1 + letter2 + " "

        # Najdi pozice písmen v matici
        row1, col1 = None, None
        row2, col2 = None, None

        for row in range(5):
            for col in range(5):
                if matrix[row][col] == letter1:
                    row1, col1 = row, col
                if matrix[row][col] == letter2:
                    row2, col2 = row, col

        # Aplikace pravidel pro šifrování
        if row1 == row2:  # Písmena jsou ve stejném řádku
            encrypted_text.append(matrix[row1][(col1 + 1) % 5])
            encrypted_text.append(matrix[row2][(col2 + 1) % 5])
        elif col1 == col2:  # Písmena jsou ve stejném sloupci
            encrypted_text.append(matrix[(row1 + 1) % 5][col1])
            encrypted_text.append(matrix[(row2 + 1) % 5][col2])
        else:  # Písmena jsou ve různých řádcích a sloupcích
            encrypted_text.append(matrix[row1][col2])
            encrypted_text.append(matrix[row2][col1])




    print(filtered_text)  # Vypsání původního textu s dvojicemi
    left_text2.delete("1.0", "end-1c")
    left_text3.delete("1.0", "end-1c")
    left_text2.insert("insert",filtered_text)
    left_text3.insert("insert",''.join(encrypted_text))
    

def playfair_decrypt(ciphertext, key):
    result = prepare_text(ciphertext)
    ciphertext = result[0]
    matrix = build_playfair_matrix(key)
    decrypted_text = []

    # Dešifrování dvojic písmen
    for i in range(0, len(ciphertext), 2):
        letter1 = ciphertext[i]
        letter2 = ciphertext[i + 1]

        # Najdi pozice písmen v matici
        row1, col1 = None, None
        row2, col2 = None, None

        for row in range(5):
            for col in range(5):
                if matrix[row][col] == letter1:
                    row1, col1 = row, col
                if matrix[row][col] == letter2:
                    row2, col2 = row, col

        # Aplikace pravidel pro dešifrování
        if row1 == row2:  # Písmena jsou ve stejném řádku
            decrypted_text.append(matrix[row1][(col1 - 1) % 5])
            decrypted_text.append(matrix[row2][(col2 - 1) % 5])
        elif col1 == col2:  # Písmena jsou ve stejném sloupci
            decrypted_text.append(matrix[(row1 - 1) % 5][col1])
            decrypted_text.append(matrix[(row2 - 1) % 5][col2])
        else:  # Písmena jsou ve různých řádcích a sloupcích
            decrypted_text.append(matrix[row1][col2])
            decrypted_text.append(matrix[row2][col1])

    decrypted_text = ''.join(decrypted_text)
    decrypted_text = decrypted_text.replace("XMEZERAX"," ")    # replaces all XMEZERAX with actual spaces
    list_Wnumbers = ["XZEROX","XONEX","XTWOX","XTHREEX","XFOURX","XFIVEX","XSIXX","XSEVENX","XEIGHTX","XNINEX"] 
    for item in list_Wnumbers:              # replaces all written numbers back with actualy numbers
        if item in decrypted_text:
            decrypted_text = decrypted_text.replace(item,str(list_Wnumbers.index(item)))
            

    if(result[1]):
        print(decrypted_text)
        decrypted_text = decrypted_text[:-1]
        print(decrypted_text)

    right_text2.delete("1.0", "end-1c")
    right_text3.delete("1.0", "end-1c")
    right_text2.insert("insert",":-)")
    right_text3.insert("insert",decrypted_text)


    

# Hlavní část programu
if __name__ == '__main__':
    root.mainloop()
   
        